{"version":3,"sources":["components/Search.js","components/TestComponent.js","components/TestButton.js","components/PlacesDetail.js","apiConfig.js","components/GoogleMap.js","components/ReviewForm.js","api/auth.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Header/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","props","setQuery","query","setState","handleAutocompleteSelect","a","geocodeByAddress","results","getLatLng","coordinates","setApp","placeData","state","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","style","height","width","fontSize","placeholder","map","suggestion","active","backgroundColor","cursor","description","React","Component","GoogleApiWrapper","apiKey","process","TestComponent","test","formatted_address","rel","href","target","place_id","TestButton","url","executeTest","console","log","geocodeByPlaceId","placeId","then","to","PlacesDetail","placeImage","photos","getUrl","alt","src","name","reference","apiUrls","window","location","hostname","apiUrl","GoogleMap","componentDidMount","navigator","geolocation","getCurrentPosition","pos","coords","lat","latitude","lng","longitude","mapCenter","axios","data","allData","work_spaces","onMarkerClick","marker","event","selectedMarker","showWindow","onInfoWindowClose","showPOI","poiLocation","latLng","service","google","maps","places","PlacesService","getDetails","fields","status","handleClick","center","initialCenter","zoom","clickableIcons","onClick","position","visible","workSpace","onClose","ReviewForm","handleChange","handleSubmit","preventDefault","method","work_space","headers","Authorization","user","token","review","rating","note","work_space_id","id","display","catch","alert","closeWindow","redirect","float","onSubmit","type","min","max","required","signIn","credentials","email","password","SignUp","onSignUp","history","setUser","password_confirmation","passwordConfirmation","res","push","error","Form","Group","controlId","Label","Control","Button","variant","withRouter","SignIn","onSignIn","authenticatedOptions","Nav","Link","unauthenticatedOptions","alwaysOptions","Header","Navbar","collapseOnSelect","fixed","bg","expand","Brand","color","Toggle","aria-controls","Collapse","App","clearUser","bounds","path","render","bind","Boolean","match","appJsx","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acb94b14.chunk.js","sourcesContent":["import React from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\nimport {GoogleApiWrapper} from 'google-maps-react'\r\nimport './Search.css'\r\n\r\n\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            query: ''\r\n        }\r\n    }\r\n\r\n// set query to find Place data\r\nsetQuery = query => {\r\n    this.setState({ query })\r\n}\r\n\r\n// send query to find Place data\r\n// use Place data to get coordinates\r\n// update state with coordinates and Place data\r\nhandleAutocompleteSelect = async query => {\r\n    const results = await geocodeByAddress(query)\r\n    const coordinates = await getLatLng(results[0])\r\n    this.props.setApp({ coordinates })\r\n    this.props.setApp({ placeData: results[0] })\r\n}\r\n\r\nrender() {\r\n    return (\r\n        <PlacesAutocomplete\r\n        value={this.state.query}\r\n        onChange={this.setQuery}\r\n        onSelect={this.handleAutocompleteSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <div className='search-bar'>\r\n          <input\r\n            style={{ height: '40px', width: '100%', fontSize: '16px' }}\r\n            {...getInputProps({\r\n              placeholder: 'Search Places ...',\r\n              className: 'location-search-input',\r\n            })}\r\n          />\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {loading && <div>Loading...</div>}\r\n            {suggestions.map(suggestion => {\r\n              const className = suggestion.active\r\n                ? 'suggestion-item--active'\r\n                : 'suggestion-item';\r\n              // inline style for demonstration purpose\r\n              const style = suggestion.active\r\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n              return (\r\n                <div\r\n                  {...getSuggestionItemProps(suggestion, {\r\n                    className,\r\n                    style,\r\n                  })}\r\n                >\r\n                  <span>{suggestion.description}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n      </PlacesAutocomplete>\r\n    )\r\n}\r\n    \r\n}\r\n\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\r\n})(Search)","import React from 'react'\r\n\r\nclass TestComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n    // render information inside an infoWindow for POI\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>test component</h1>\r\n                <p>{this.props.placeData && this.props.placeData.formatted_address}</p>\r\n                <a rel=\"noopener noreferrer\" href={'https://developers.google.com/maps/documentation/javascript/tutorial'} target={'_blank'}>\r\n                  <button>display link to create a review</button>\r\n                </a>\r\n                <p>{this.props.placeData && this.props.placeData.place_id}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestComponent\r\n","import React from 'react'\r\nimport { geocodeByPlaceId } from 'react-places-autocomplete'\r\nimport { HashRouter, Link } from 'react-router-dom'\r\n\r\n\r\nclass TestButton extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        geocodeByPlaceId(this.props.placeId)\r\n            .then(console.log)\r\n    }\r\n\r\n    url = 'http://localhost:3000'\r\n\r\n    executeTest = () => {\r\n        console.log('test button')\r\n    }\r\n\r\n    // render information inside an infoWindow for POI\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Link to='/new'>\r\n                    <button>Add a Review</button>\r\n                </Link>\r\n            </HashRouter>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestButton\r\n","import React from 'react'\r\nimport TestButton from './TestButton'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlacesDetail extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let placeImage = ''\r\n        // if data does not have any photos, display 'no image found' image\r\n        if (this.props.placeData && !this.props.placeData.photos) {\r\n            placeImage = 'https://1m19tt3pztls474q6z46fnk9-wpengine.netdna-ssl.com/wp-content/themes/unbound/images/No-Image-Found-400x264.png'\r\n        }\r\n        // if data includes photos, get url of the first photo\r\n        if (this.props.placeData && this.props.placeData.photos) {\r\n            placeImage = this.props.placeData.photos[0].getUrl()\r\n        }\r\n        let jsx\r\n        if (this.props.placeData) {\r\n            jsx = (\r\n                <div>\r\n\r\n                    <img height={'200px'} alt={'pic'} src={placeImage} />\r\n                    <h1>{this.props.placeData.name}</h1>\r\n                    <p><strong>google place_id: </strong>{this.props.placeData.reference || 'unknown'}</p>\r\n\r\n                    <TestButton placeId={this.props.placeData.reference}/>\r\n                </div>\r\n            )\r\n        } else {\r\n            jsx = (\r\n                <div>\r\n                    <h3>Loading...</h3>\r\n                </div>\r\n            )\r\n        }\r\n        return jsx\r\n    }\r\n}\r\n\r\nPlacesDetail.propTypes = {\r\n    placeData: PropTypes.object\r\n}\r\n\r\nexport default PlacesDetail\r\n","let apiUrl\r\nconst apiUrls = {\r\n  production: 'https://murmuring-anchorage-97253.herokuapp.com/',\r\n  development: 'http://localhost:4741'\r\n}\r\n\r\nif (window.location.hostname === 'localhost') {\r\n  apiUrl = apiUrls.development\r\n} else {\r\n  apiUrl = apiUrls.production\r\n}\r\n\r\n// hack to access production api from localhost\r\n// commment out or remove this line to access development api\r\napiUrl = apiUrls.production\r\n\r\nexport default apiUrl\r\n","import React from 'react'\r\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'\r\nimport TestComponent from './TestComponent'\r\nimport PlacesDetail from './PlacesDetail'\r\nimport axios from 'axios'\r\nimport apiUrl from '../apiConfig'\r\n\r\n\r\nclass GoogleMap extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            selectedMarker: null,\r\n            showWindow: false,\r\n            allData: []\r\n        }\r\n    }\r\n\r\n    // Using geolocation from browser to location user location\r\n    componentDidMount = () => {\r\n      if(navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n        console.log('found user location')\r\n        const coords = pos.coords\r\n        const lat = coords.latitude\r\n        const lng = coords.longitude\r\n        this.props.setApp({ mapCenter: { lat, lng }})\r\n        })\r\n      }\r\n      axios(apiUrl + '/work_spaces')\r\n        .then(data => {\r\n            console.log(data)\r\n            this.setState({ allData: data.data.work_spaces })\r\n        })\r\n    }\r\n\r\n      // onClick handler to set marker to state and show corresponding info window\r\n    onMarkerClick = (props, marker, event) => {\r\n        this.setState({ selectedMarker: marker, showWindow: true })\r\n    }\r\n\r\n    // onClose handler for InfoWindow\r\n    onInfoWindowClose = () => {\r\n        this.setState({ showWindow: false })\r\n    }\r\n\r\n    showPOI = (map, event) => {\r\n        // declare function to handle data returned from service.getDetails()\r\n        const handleData = (data, status) => {\r\n            console.log(data)\r\n            // save data from places details to state.placeData\r\n            this.props.setApp({placeData: data})\r\n        }\r\n\r\n        // save the click location and reset place data\r\n\r\n        this.props.setApp({\r\n            poiLocation: { lat: event.latLng.lat(), lng: event.latLng.lng() },\r\n            mapCenter: { lat: event.latLng.lat(), lng: event.latLng.lng() },\r\n            placeData: null,\r\n            placeId: event.placeId\r\n        })\r\n        // create new instance of class PlacesService to access google places api\r\n        const service = new this.props.google.maps.places.PlacesService(map)\r\n        console.log('service is:', service)\r\n\r\n        // call getDetails from google places api, passing placeId, fields to get data for, and above callback function to handle the response\r\n        service.getDetails(\r\n            {\r\n                placeId: event.placeId,\r\n                fields: ['name', 'website', 'formatted_phone_number', 'formatted_address', 'photo', 'reference', 'reviews']\r\n            },\r\n            handleData\r\n        )\r\n    }\r\n\r\n    handleClick = (props, map, event) => {\r\n        // if click event has a place id, get details on place and save data to state\r\n        if(event.placeId) {\r\n            // first save the location and place id to state. Clear data for place image and place data\r\n            this.showPOI(map, event)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Map google={this.props.google}\r\n             center={this.props.center}\r\n             initialCenter={this.props.center}\r\n             zoom={14}\r\n             clickableIcons={true}\r\n\r\n             onClick={this.handleClick}\r\n            >\r\n\r\n                {/* info window for poi locations */}\r\n                <InfoWindow\r\n                    position={this.props.poiLocation}\r\n                    visible={true}\r\n                >\r\n                    <PlacesDetail placeData={this.props.placeData} />\r\n                </InfoWindow>\r\n\r\n                {this.state.allData.map(workSpace => (\r\n                    <Marker onClick={this.onMarkerClick}\r\n                        position={{ lat: workSpace.lat, lng: workSpace.lng}}\r\n                        placeId={workSpace.placeId}\r\n                        data={workSpace}\r\n                        name={'Current location'}\r\n                    />\r\n                ))}\r\n                \r\n\r\n                {/* InfoWindow becomes visible when this.state.showWindow === true */}\r\n                <InfoWindow marker={this.state.selectedMarker}\r\n                        visible={this.state.showWindow}\r\n                        onClose={this.onInfoWindowClose}\r\n                >\r\n                    {/* Display placeData information inside InfoWindow */}\r\n                    <TestComponent placeData={this.props.placeData} />\r\n\r\n                </InfoWindow>\r\n\r\n            </Map>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\r\n  })(GoogleMap)\r\n","import React from 'react';\r\nimport './ReviewForm.css'\r\nimport { Link, Redirect } from 'react-router-dom'\r\nimport axios from 'axios'\r\nimport apiUrl from '../apiConfig'\r\n\r\n  class ReviewForm extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        rating: 3,\r\n        review: '',\r\n        display: 'block',\r\n        redirect: false\r\n      }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n      console.log(event.target.value)\r\n      console.log(event.target.name)\r\n      this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      // 1. create a workspace\r\n      axios({\r\n        method: 'post',\r\n        url: apiUrl + '/work_spaces',\r\n        data: {\r\n          work_space: {\r\n            place_id: this.props.placeId,\r\n            lat: this.props.location.lat,\r\n            lng: this.props.location.lng\r\n          }\r\n        },\r\n        headers: {\r\n          Authorization: `Token token=${this.props.user.token}`\r\n        }\r\n\r\n      })\r\n      // 2. create a review associated with the new workspace\r\n      .then(data => {\r\n        console.log(data)\r\n        axios({\r\n          method: 'post',\r\n          url: apiUrl + '/reviews',\r\n          data: {\r\n            review: {\r\n              rating: this.state.rating,\r\n              note: this.state.review,\r\n              work_space_id: data.data.work_space.id\r\n            }\r\n          },\r\n          headers: {\r\n            Authorization: `Token token=${this.props.user.token}`\r\n          }\r\n        })\r\n        .then(data => {\r\n          console.log(data)\r\n          this.setState({ display: 'none' })\r\n        })\r\n      })\r\n      // 3. redirect to '/' and close the review form\r\n      \r\n      .catch(() => alert('create review failed'))\r\n    }\r\n\r\n    closeWindow = () => {\r\n      // update state which updates component's style to diplay: none\r\n      this.setState({ display: 'none' })\r\n    }\r\n\r\n    render () {\r\n      // if user is not signed in, redirect to '/sign-in'\r\n      if (!this.props.user) {\r\n        return (<Redirect to='/sign-in'/>)\r\n      }\r\n\r\n      return (\r\n          <div className='review-form' style={{display: this.state.display}}>\r\n\r\n          <Link to='/'>\r\n            <button style={{float: 'right'}} onClick={this.closeWindow}>Close</button>\r\n          </Link>\r\n\r\n          <h1> Review </h1>\r\n\r\n            <form onSubmit={this.handleSubmit}>\r\n\r\n              <label> Rating: </label>\r\n              <input name=\"rating\" type=\"range\" min=\"0\" max=\"5\" value={this.state.rating} onChange={this.handleChange}/>\r\n              <p>{this.state.rating}</p>\r\n\r\n              <label> Review: </label>\r\n              <textarea name=\"review\" value={this.state.review} onChange={this.handleChange} required/>\r\n              <button> Submit </button>\r\n\r\n            </form>\r\n          </div>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  export default ReviewForm;\r\n","import apiUrl from '../apiConfig'\r\nimport axios from 'axios'\r\n\r\nexport const signUp = credentials => {\r\n  return axios({\r\n    method: 'POST',\r\n    url: apiUrl + '/sign-up',\r\n    data: {\r\n      credentials: {\r\n        email: credentials.email,\r\n        password: credentials.password,\r\n        password_confirmation: credentials.passwordConfirmation\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport const signIn = credentials => {\r\n  return axios({\r\n    url: apiUrl + '/sign-in',\r\n    method: 'POST',\r\n    data: {\r\n      credentials: {\r\n        email: credentials.email,\r\n        password: credentials.password\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport const signOut = user => {\r\n  return axios({\r\n    url: apiUrl + '/sign-out',\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Authorization': `Token token=${user.token}`\r\n    }\r\n  })\r\n}\r\n\r\nexport const changePassword = (passwords, user) => {\r\n  return axios({\r\n    url: apiUrl + '/change-password',\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Authorization': `Token token=${user.token}`\r\n    },\r\n    data: {\r\n      passwords: {\r\n        old: passwords.oldPassword,\r\n        new: passwords.newPassword\r\n      }\r\n    }\r\n  })\r\n}\r\n","import React, { Component } from 'react'\r\nimport { withRouter, Link } from 'react-router-dom'\r\n\r\nimport { signUp, signIn } from '../../api/auth'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport './SignUp.css'\r\n\r\nclass SignUp extends Component {\r\n  constructor () {\r\n    super()\r\n\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      passwordConfirmation: ''\r\n    }\r\n  }\r\n\r\n  handleChange = event => this.setState({\r\n    [event.target.name]: event.target.value\r\n  })\r\n\r\n  onSignUp = event => {\r\n    event.preventDefault()\r\n\r\n    const { history, setUser } = this.props\r\n\r\n    signUp(this.state)\r\n      .then(() => signIn(this.state))\r\n      .then(res => setUser(res.data.user))\r\n      .then(() => history.push('/'))\r\n      .catch(error => {\r\n        console.error(error)\r\n        this.setState({ email: '', password: '', passwordConfirmation: '' })\r\n      })\r\n      console.log('signUp: ' + this.state.email)\r\n  }\r\n\r\n  render () {\r\n    const { email, password, passwordConfirmation } = this.state\r\n\r\n    return (\r\n      <div className=\"row body sign-up\">\r\n        <div className=\"col-sm-10 col-md-8 mx-auto mt-5\">\r\n          <Link to='/'>\r\n            <button style={{float: 'right'}} onClick={this.closeWindow}>Close</button>\r\n          </Link>\r\n          <h3>Sign Up</h3>\r\n          <Form onSubmit={this.onSignUp}>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                placeholder=\"Enter email\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                required\r\n                name=\"password\"\r\n                value={password}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"passwordConfirmation\">\r\n              <Form.Label>Password Confirmation</Form.Label>\r\n              <Form.Control\r\n                required\r\n                name=\"passwordConfirmation\"\r\n                value={passwordConfirmation}\r\n                type=\"password\"\r\n                placeholder=\"Confirm Password\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SignUp)\r\n","import React, { Component } from 'react'\r\nimport { withRouter, Link } from 'react-router-dom'\r\n\r\nimport { signIn } from '../../api/auth'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport './SignIn.css'\r\n\r\nclass SignIn extends Component {\r\n  constructor () {\r\n    super()\r\n\r\n    this.state = {\r\n      email: '',\r\n      password: ''\r\n    }\r\n  }\r\n\r\n  handleChange = event => this.setState({\r\n    [event.target.name]: event.target.value\r\n  })\r\n\r\n  onSignIn = event => {\r\n    event.preventDefault()\r\n    const { history, setUser } = this.props\r\n    signIn(this.state)\r\n      .then(res => setUser(res.data.user))\r\n      .then(() => history.push('/'))\r\n      .catch(error => {\r\n        console.error(error)\r\n        this.setState({ email: '', password: '' })\r\n      })\r\n      console.log('SignIn: ' + this.state.email)\r\n  }\r\n\r\n  render () {\r\n    const { email, password } = this.state\r\n\r\n    return (\r\n      <div className=\"row sign-in\">\r\n        <div className=\"col-sm-10 col-md-8 mx-auto mt-5\">\r\n          <Link to='/'>\r\n            <button style={{float: 'right'}} onClick={this.closeWindow}>Close</button>\r\n          </Link>\r\n          <h3>Sign In</h3>\r\n          <Form onSubmit={this.onSignIn}>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                placeholder=\"Enter email\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                required\r\n                name=\"password\"\r\n                value={password}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SignIn)\r\n","import React, { Fragment } from 'react'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nconst authenticatedOptions = (\r\n  <Fragment>\r\n    <Nav.Link href=\"#change-password\">Change Password</Nav.Link>\r\n    <Nav.Link href=\"#sign-out\">Sign Out</Nav.Link>\r\n  </Fragment>\r\n)\r\n\r\nconst unauthenticatedOptions = (\r\n  <Fragment>\r\n    <Nav.Link href=\"#sign-up\">Sign Up</Nav.Link>\r\n    <Nav.Link href=\"#sign-in\">Sign In</Nav.Link>\r\n  </Fragment>\r\n)\r\n\r\nconst alwaysOptions = (\r\n  <Fragment>\r\n    <Nav.Link href=\"#/\">Home</Nav.Link>\r\n  </Fragment>\r\n)\r\n\r\nconst Header = ({ user }) => (\r\n  <Navbar collapseOnSelect fixed=\"top\" bg=\"secondary\" variant=\"dark\" expand=\"md\">\r\n    <Navbar.Brand href=\"#\">\r\n      WorkFromRoam\r\n    </Navbar.Brand>\r\n    <Nav>\r\n      { user && <span style={{ color: 'black' }} className=\"navbar-text mr-2\">Welcome, {user.email}</span>}\r\n    </Nav>\r\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"ml-auto\">\r\n        { alwaysOptions }\r\n        { user ? authenticatedOptions : unauthenticatedOptions }\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Navbar>\r\n)\r\n\r\nexport default Header\r\n","import React, { Fragment } from 'react';\r\nimport '../App.css';\r\nimport Search from './Search'\r\nimport GoogleMap from './GoogleMap';\r\nimport ReviewForm from './ReviewForm';\r\nimport SignUp from './SignUp/SignUp'\r\nimport SignIn from './SignIn/SignIn'\r\nimport Header from './Header/Header'\r\nimport { Route } from 'react-router-dom'\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      poiLocation: null,\r\n      mapCenter: { lat: 42.3601, lng: -71.0589},\r\n      bounds: null,\r\n      placeId: null,\r\n      placeData: null,\r\n      //\r\n      \r\n      user: null,\r\n    }\r\n  }\r\n\r\n  setUser = user => this.setState({ user })\r\n\r\n  clearUser = () => this.setState({ user: null })\r\n\r\n\r\n  render() {\r\n\r\n    const { user } = this.state\r\n\r\n    return (\r\n<div>\r\n<Fragment>\r\n<Header user={user} />\r\n\r\n        <Route path='/new'>\r\n          <ReviewForm \r\n            user={user}\r\n            placeId={this.state.placeId}\r\n            placeData={this.state.placeData}\r\n            location={this.state.poiLocation}\r\n          />\r\n        </Route>\r\n\r\n        <Route path='/sign-up' render={() => (\r\n           <SignUp setUser={this.setUser} />\r\n         )} />\r\n\r\n         <Route path='/sign-in' render={() => (\r\n            <SignIn user={user} setUser={this.setUser} />\r\n          )} />\r\n\r\n        <Route path='/'>\r\n          <div className=\"App\">\r\n\r\n            <Search setApp={this.setState.bind(this)}/>\r\n\r\n            <GoogleMap\r\n              center={this.state.mapCenter}\r\n              coordinates={this.state.coordinates}\r\n              placeData={this.state.placeData}\r\n              //\r\n              setApp={this.setState.bind(this)}\r\n              poiLocation={this.state.poiLocation}\r\n            />\r\n\r\n          </div>\r\n        </Route>\r\n      </Fragment>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nconst appJsx = (\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n)\r\n\r\nReactDOM.render(appJsx, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}