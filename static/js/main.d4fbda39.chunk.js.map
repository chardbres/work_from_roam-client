{"version":3,"sources":["components/Search.js","components/TestComponent.js","components/TestButton.js","components/PlacesDetail.js","components/GoogleMap.js","components/ReviewForm.js","apiConfig.js","api/auth.js","components/SignUp/SignUp.js","components/SignIn/SignIn.js","components/Header/Header.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","props","setQuery","query","setState","handleAutocompleteSelect","a","geocodeByAddress","results","getLatLng","coordinates","setApp","placeData","state","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","style","height","width","fontSize","placeholder","map","suggestion","active","backgroundColor","cursor","description","React","Component","GoogleApiWrapper","apiKey","process","TestComponent","test","formatted_address","rel","href","target","place_id","TestButton","url","executeTest","console","log","geocodeByPlaceId","placeId","then","to","PlacesDetail","placeImage","photos","getUrl","alt","src","name","reference","GoogleMap","componentDidMount","navigator","geolocation","getCurrentPosition","pos","coords","lat","latitude","lng","longitude","userLocation","showMarker","onMarkerClick","marker","event","selectedMarker","showWindow","onInfoWindowClose","showPOI","poiLocation","latLng","service","google","maps","places","PlacesService","getDetails","fields","data","status","handleClick","showPoiWindow","center","initialCenter","zoom","clickableIcons","onClick","position","visible","onClose","ReviewForm","handleChange","handleSubmit","preventDefault","user","redirect","closeWindow","show","rating","review","display","float","onSubmit","type","min","max","required","apiUrls","window","location","hostname","apiUrl","signIn","credentials","axios","method","email","password","SignUp","onSignUp","history","setUser","password_confirmation","passwordConfirmation","res","push","catch","error","Form","Group","controlId","Label","Control","Button","variant","withRouter","SignIn","onSignIn","authenticatedOptions","Nav","Link","unauthenticatedOptions","alwaysOptions","Header","Navbar","collapseOnSelect","fixed","bg","expand","Brand","color","Toggle","aria-controls","Collapse","id","App","clearUser","path","render","bind","Boolean","match","appJsx","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d4fbda39.chunk.js","sourcesContent":["import React from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\nimport {GoogleApiWrapper} from 'google-maps-react'\r\nimport './Search.css'\r\n\r\n\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            query: ''\r\n        }\r\n    }\r\n\r\n// set query to find Place data\r\nsetQuery = query => {\r\n    this.setState({ query })\r\n}\r\n\r\n// send query to find Place data\r\n// use Place data to get coordinates\r\n// update state with coordinates and Place data\r\nhandleAutocompleteSelect = async query => {\r\n    const results = await geocodeByAddress(query)\r\n    const coordinates = await getLatLng(results[0])\r\n    this.props.setApp({ coordinates })\r\n    this.props.setApp({ placeData: results[0] })\r\n}\r\n\r\nrender() {\r\n    return (\r\n        <PlacesAutocomplete\r\n        value={this.state.query}\r\n        onChange={this.setQuery}\r\n        onSelect={this.handleAutocompleteSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <div className='search-bar'>\r\n          <input\r\n            style={{ height: '40px', width: '100%', fontSize: '16px' }}\r\n            {...getInputProps({\r\n              placeholder: 'Search Places ...',\r\n              className: 'location-search-input',\r\n            })}\r\n          />\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {loading && <div>Loading...</div>}\r\n            {suggestions.map(suggestion => {\r\n              const className = suggestion.active\r\n                ? 'suggestion-item--active'\r\n                : 'suggestion-item';\r\n              // inline style for demonstration purpose\r\n              const style = suggestion.active\r\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n              return (\r\n                <div\r\n                  {...getSuggestionItemProps(suggestion, {\r\n                    className,\r\n                    style,\r\n                  })}\r\n                >\r\n                  <span>{suggestion.description}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n      </PlacesAutocomplete>\r\n    )\r\n}\r\n    \r\n}\r\n\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\r\n})(Search)","import React from 'react'\r\n\r\nclass TestComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n    // render information inside an infoWindow for POI\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>test component</h1>\r\n                <p>{this.props.placeData.formatted_address}</p>\r\n                <a rel=\"noopener noreferrer\" href={'https://developers.google.com/maps/documentation/javascript/tutorial'} target={'_blank'}>\r\n                  <button>display link to create a review</button>\r\n                </a>\r\n                <p>{this.props.placeData.place_id}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestComponent\r\n","import React from 'react'\r\nimport { geocodeByPlaceId } from 'react-places-autocomplete'\r\nimport { HashRouter, Link } from 'react-router-dom'\r\n\r\n\r\nclass TestButton extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        geocodeByPlaceId(this.props.placeId)\r\n            .then(console.log)\r\n    }\r\n\r\n    url = 'http://localhost:3000'\r\n\r\n    executeTest = () => {\r\n        console.log('test button')\r\n    }\r\n\r\n    // render information inside an infoWindow for POI\r\n\r\n    render() {\r\n        return (\r\n            <HashRouter>\r\n                <Link to={`/new/${this.props.placeId}`}>\r\n                    <button>Add a Review</button>\r\n                </Link>\r\n            </HashRouter>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestButton\r\n","import React from 'react'\r\nimport TestButton from './TestButton'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlacesDetail extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n\r\n    render() {\r\n        let placeImage = ''\r\n        // if data does not have any photos, display 'no image found' image\r\n        if (this.props.placeData && !this.props.placeData.photos) {\r\n            placeImage = 'https://1m19tt3pztls474q6z46fnk9-wpengine.netdna-ssl.com/wp-content/themes/unbound/images/No-Image-Found-400x264.png'\r\n        }\r\n        // if data includes photos, get url of the first photo\r\n        if (this.props.placeData && this.props.placeData.photos) {\r\n            placeImage = this.props.placeData.photos[0].getUrl()\r\n        }\r\n        let jsx\r\n        if (this.props.placeData) {\r\n            jsx = (\r\n                <div>\r\n\r\n                    <img height={'200px'} alt={'pic'} src={placeImage} />\r\n                    <h1>{this.props.placeData.name}</h1>\r\n                    <p><strong>google place_id: </strong>{this.props.placeData.reference || 'unknown'}</p>\r\n\r\n                    <TestButton placeId={this.props.placeData.reference}/>\r\n                </div>\r\n            )\r\n        } else {\r\n            jsx = (\r\n                <div>\r\n                    <h3>Loading...</h3>\r\n                </div>\r\n            )\r\n        }\r\n        return jsx\r\n    }\r\n}\r\n\r\nPlacesDetail.propTypes = {\r\n    placeData: PropTypes.object\r\n}\r\n\r\nexport default PlacesDetail\r\n","import React from 'react'\r\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'\r\nimport TestComponent from './TestComponent'\r\nimport PlacesDetail from './PlacesDetail'\r\n// import TestButton from './TestButton'\r\n\r\n\r\nclass GoogleMap extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            placeData: null,\r\n            poiLocation: null,\r\n            selectedMarker: null,\r\n            showPoiWindow: true,\r\n            showMarker: false,\r\n            showWindow: false,\r\n            userLocation: '',\r\n\r\n        }\r\n    }\r\n\r\n    // Using geolocation from browser to location user location\r\n    componentDidMount = () => {\r\n      if(navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n        console.log('found user location')\r\n        const coords = pos.coords\r\n        const lat = coords.latitude\r\n        const lng = coords.longitude\r\n        this.setState({ userLocation: { lat, lng },\r\n                        showMarker: true })\r\n                      })\r\n      }\r\n    }\r\n\r\n      // onClick handler to set marker to state and show corresponding info window\r\n    onMarkerClick = (props, marker, event) => {\r\n        this.setState({ selectedMarker: marker, showWindow: true })\r\n    }\r\n\r\n    // onClose handler for InfoWindow\r\n    onInfoWindowClose = () => {\r\n        this.setState({ showWindow: false })\r\n    }\r\n\r\n    showPOI = (map, event) => {\r\n        // declare function to handle data returned from service.getDetails()\r\n        const handleData = (data, status) => {\r\n            console.log(data)\r\n            // save data from places details to state.placeData\r\n            this.setState({placeData: data})\r\n        }\r\n\r\n        // save the click location and reset place data\r\n\r\n        this.setState({\r\n            poiLocation: { lat: event.latLng.lat(), lng: event.latLng.lng() },\r\n            userLocation: { lat: event.latLng.lat(), lng: event.latLng.lng() },\r\n            placeData: null\r\n        })\r\n        // create new instance of class PlacesService to access google places api\r\n        const service = new this.props.google.maps.places.PlacesService(map)\r\n        console.log('service is:', service)\r\n\r\n        // call getDetails from google places api, passing placeId, fields to get data for, and above callback function to handle the response\r\n        service.getDetails(\r\n            {\r\n                placeId: event.placeId,\r\n                fields: ['name', 'website', 'formatted_phone_number', 'formatted_address', 'photo', 'reference', 'reviews']\r\n            },\r\n            handleData\r\n        )\r\n    }\r\n\r\n    handleClick = (props, map, event) => {\r\n        // if click event has a place id, get details on place and save data to state\r\n        if(event.placeId) {\r\n            // first save the location and place id to state. Clear data for place image and place data\r\n            this.showPOI(map, event)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Map google={this.props.google}\r\n             center={this.state.userLocation}\r\n             initialCenter={this.props.initialCenter}\r\n             zoom={14}\r\n             clickableIcons={true}\r\n\r\n             onClick={this.handleClick}\r\n            >\r\n\r\n                {/* info window for poi locations */}\r\n                <InfoWindow\r\n                    position={this.state.poiLocation}\r\n                    visible={true}\r\n                >\r\n                    <PlacesDetail placeData={this.state.placeData} />\r\n                </InfoWindow>\r\n\r\n                {/* Marker needs a position prop to render, initially undefined\r\n                    User search sets the coordinates and passed down as props.coordinates */}\r\n                <Marker onClick={this.onMarkerClick}\r\n                    position={this.state.userLocation}\r\n                    name={'Current location'}\r\n                />\r\n\r\n                {/* InfoWindow becomes visible when this.state.showWindow === true */}\r\n                <InfoWindow marker={this.state.selectedMarker}\r\n                        position={this.props.coordinates}\r\n                        visible={this.state.showWindow}\r\n                        onClose={this.onInfoWindowClose}\r\n                >\r\n                    {/* Display placeData information inside InfoWindow */}\r\n                    <TestComponent placeData={this.props.placeData} />\r\n\r\n                </InfoWindow>\r\n\r\n            </Map>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\r\n  })(GoogleMap)\r\n","import React from 'react';\r\nimport './ReviewForm.css'\r\nimport { Link, Redirect } from 'react-router-dom'\r\n\r\n  class ReviewForm extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        rating: 3,\r\n        review: '',\r\n        show: true,\r\n        redirect: false\r\n      }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n      console.log(event.target.value)\r\n      console.log(event.target.name)\r\n      this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      if (!this.props.user) {\r\n        this.setState({redirect: true})\r\n      }\r\n      \r\n    }\r\n\r\n    closeWindow = () => {\r\n      this.setState({ show: false })\r\n    }\r\n\r\n    render () {\r\n      if (!this.props.user) {\r\n        return (<Redirect to='/sign-in'/>)\r\n      }\r\n      let show = 'block'\r\n        if (!this.state.show) {\r\n          show = 'none'\r\n        }\r\n      return (\r\n          <div className='review-form' style={{display: show}}>\r\n\r\n          <Link to='/'>\r\n            <button style={{float: 'right'}} onClick={this.closeWindow}>Close</button>\r\n          </Link>\r\n\r\n          <h1> Review </h1>\r\n\r\n            <form onSubmit={this.handleSubmit}>\r\n\r\n              <label> Rating: </label>\r\n              <input name=\"rating\" type=\"range\" min=\"0\" max=\"5\" value={this.state.rating} onChange={this.handleChange}/>\r\n              <p>{this.state.rating}</p>\r\n\r\n              <label> Review: </label>\r\n              <textarea name=\"review\" value={this.state.review} onChange={this.handleChange} required/>\r\n              <button> Submit </button>\r\n\r\n            </form>\r\n          </div>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  export default ReviewForm;\r\n","let apiUrl\r\nconst apiUrls = {\r\n  production: 'https://murmuring-anchorage-97253.herokuapp.com/',\r\n  development: 'http://localhost:4741'\r\n}\r\n\r\nif (window.location.hostname === 'localhost') {\r\n  apiUrl = apiUrls.development\r\n} else {\r\n  apiUrl = apiUrls.production\r\n}\r\n\r\n// hack to access production api from localhost\r\n// commment out or remove this line to access development api\r\napiUrl = apiUrls.production\r\n\r\nexport default apiUrl\r\n","import apiUrl from '../apiConfig'\r\nimport axios from 'axios'\r\n\r\nexport const signUp = credentials => {\r\n  return axios({\r\n    method: 'POST',\r\n    url: apiUrl + '/sign-up',\r\n    data: {\r\n      credentials: {\r\n        email: credentials.email,\r\n        password: credentials.password,\r\n        password_confirmation: credentials.passwordConfirmation\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport const signIn = credentials => {\r\n  return axios({\r\n    url: apiUrl + '/sign-in',\r\n    method: 'POST',\r\n    data: {\r\n      credentials: {\r\n        email: credentials.email,\r\n        password: credentials.password\r\n      }\r\n    }\r\n  })\r\n}\r\n\r\nexport const signOut = user => {\r\n  return axios({\r\n    url: apiUrl + '/sign-out',\r\n    method: 'DELETE',\r\n    headers: {\r\n      'Authorization': `Token token=${user.token}`\r\n    }\r\n  })\r\n}\r\n\r\nexport const changePassword = (passwords, user) => {\r\n  return axios({\r\n    url: apiUrl + '/change-password',\r\n    method: 'PATCH',\r\n    headers: {\r\n      'Authorization': `Token token=${user.token}`\r\n    },\r\n    data: {\r\n      passwords: {\r\n        old: passwords.oldPassword,\r\n        new: passwords.newPassword\r\n      }\r\n    }\r\n  })\r\n}\r\n","import React, { Component } from 'react'\r\nimport { withRouter, Link } from 'react-router-dom'\r\n\r\nimport { signUp, signIn } from '../../api/auth'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport './SignUp.css'\r\n\r\nclass SignUp extends Component {\r\n  constructor () {\r\n    super()\r\n\r\n    this.state = {\r\n      email: '',\r\n      password: '',\r\n      passwordConfirmation: ''\r\n    }\r\n  }\r\n\r\n  handleChange = event => this.setState({\r\n    [event.target.name]: event.target.value\r\n  })\r\n\r\n  onSignUp = event => {\r\n    event.preventDefault()\r\n\r\n    const { history, setUser } = this.props\r\n\r\n    signUp(this.state)\r\n      .then(() => signIn(this.state))\r\n      .then(res => setUser(res.data.user))\r\n      .then(() => history.push('/'))\r\n      .catch(error => {\r\n        console.error(error)\r\n        this.setState({ email: '', password: '', passwordConfirmation: '' })\r\n      })\r\n      console.log('signUp: ' + this.state.email)\r\n  }\r\n\r\n  render () {\r\n    const { email, password, passwordConfirmation } = this.state\r\n\r\n    return (\r\n      <div className=\"row body sign-up\">\r\n        <div className=\"col-sm-10 col-md-8 mx-auto mt-5\">\r\n          <Link to='/'>\r\n            <button style={{float: 'right'}} onClick={this.closeWindow}>Close</button>\r\n          </Link>\r\n          <h3>Sign Up</h3>\r\n          <Form onSubmit={this.onSignUp}>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                placeholder=\"Enter email\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                required\r\n                name=\"password\"\r\n                value={password}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"passwordConfirmation\">\r\n              <Form.Label>Password Confirmation</Form.Label>\r\n              <Form.Control\r\n                required\r\n                name=\"passwordConfirmation\"\r\n                value={passwordConfirmation}\r\n                type=\"password\"\r\n                placeholder=\"Confirm Password\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SignUp)\r\n","import React, { Component } from 'react'\r\nimport { withRouter, Link } from 'react-router-dom'\r\n\r\nimport { signIn } from '../../api/auth'\r\n\r\nimport Form from 'react-bootstrap/Form'\r\nimport Button from 'react-bootstrap/Button'\r\n\r\nimport './SignIn.css'\r\n\r\nclass SignIn extends Component {\r\n  constructor () {\r\n    super()\r\n\r\n    this.state = {\r\n      email: '',\r\n      password: ''\r\n    }\r\n  }\r\n\r\n  handleChange = event => this.setState({\r\n    [event.target.name]: event.target.value\r\n  })\r\n\r\n  onSignIn = event => {\r\n    event.preventDefault()\r\n    const { history, setUser } = this.props\r\n    signIn(this.state)\r\n      .then(res => setUser(res.data.user))\r\n      .then(() => history.push('/'))\r\n      .catch(error => {\r\n        console.error(error)\r\n        this.setState({ email: '', password: '' })\r\n      })\r\n      console.log('SignIn: ' + this.state.email)\r\n  }\r\n\r\n  render () {\r\n    const { email, password } = this.state\r\n\r\n    return (\r\n      <div className=\"row sign-in\">\r\n        <div className=\"col-sm-10 col-md-8 mx-auto mt-5\">\r\n          <Link to='/'>\r\n            <button style={{float: 'right'}} onClick={this.closeWindow}>Close</button>\r\n          </Link>\r\n          <h3>Sign In</h3>\r\n          <Form onSubmit={this.onSignIn}>\r\n            <Form.Group controlId=\"email\">\r\n              <Form.Label>Email address</Form.Label>\r\n              <Form.Control\r\n                required\r\n                type=\"email\"\r\n                name=\"email\"\r\n                value={email}\r\n                placeholder=\"Enter email\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Form.Group controlId=\"password\">\r\n              <Form.Label>Password</Form.Label>\r\n              <Form.Control\r\n                required\r\n                name=\"password\"\r\n                value={password}\r\n                type=\"password\"\r\n                placeholder=\"Password\"\r\n                onChange={this.handleChange}\r\n              />\r\n            </Form.Group>\r\n            <Button\r\n              variant=\"primary\"\r\n              type=\"submit\"\r\n            >\r\n              Submit\r\n            </Button>\r\n          </Form>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default withRouter(SignIn)\r\n","import React, { Fragment } from 'react'\r\nimport Nav from 'react-bootstrap/Nav'\r\nimport Navbar from 'react-bootstrap/Navbar'\r\n\r\nconst authenticatedOptions = (\r\n  <Fragment>\r\n    <Nav.Link href=\"#change-password\">Change Password</Nav.Link>\r\n    <Nav.Link href=\"#sign-out\">Sign Out</Nav.Link>\r\n  </Fragment>\r\n)\r\n\r\nconst unauthenticatedOptions = (\r\n  <Fragment>\r\n    <Nav.Link href=\"#sign-up\">Sign Up</Nav.Link>\r\n    <Nav.Link href=\"#sign-in\">Sign In</Nav.Link>\r\n  </Fragment>\r\n)\r\n\r\nconst alwaysOptions = (\r\n  <Fragment>\r\n    <Nav.Link href=\"#/\">Home</Nav.Link>\r\n  </Fragment>\r\n)\r\n\r\nconst Header = ({ user }) => (\r\n  <Navbar collapseOnSelect fixed=\"top\" bg=\"secondary\" variant=\"dark\" expand=\"md\">\r\n    <Navbar.Brand href=\"#\">\r\n      WorkFromRoam\r\n    </Navbar.Brand>\r\n    <Nav>\r\n      { user && <span style={{ color: 'black' }} className=\"navbar-text mr-2\">Welcome, {user.email}</span>}\r\n    </Nav>\r\n    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n      <Nav className=\"ml-auto\">\r\n        { alwaysOptions }\r\n        { user ? authenticatedOptions : unauthenticatedOptions }\r\n      </Nav>\r\n    </Navbar.Collapse>\r\n  </Navbar>\r\n)\r\n\r\nexport default Header\r\n","import React, { Fragment } from 'react';\r\nimport '../App.css';\r\nimport Search from './Search'\r\nimport GoogleMap from './GoogleMap';\r\nimport ReviewForm from './ReviewForm';\r\nimport SignUp from './SignUp/SignUp'\r\nimport SignIn from './SignIn/SignIn'\r\nimport Header from './Header/Header'\r\nimport { Route } from 'react-router-dom'\r\n\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      coordinates: {\r\n        lat: null,\r\n        lng: null\r\n      },\r\n      user: null,\r\n      placeData: '',\r\n      userLocation: { lat: 42.3601, lng: -71.0589}\r\n    }\r\n  }\r\n\r\n  setUser = user => this.setState({ user })\r\n\r\n  clearUser = () => this.setState({ user: null })\r\n\r\n\r\n  render() {\r\n\r\n    const { user } = this.state\r\n\r\n    return (\r\n<div>\r\n<Fragment>\r\n<Header user={user} />\r\n\r\n        <Route path='/new/:placeId'>\r\n          <ReviewForm user={user}/>\r\n        </Route>\r\n\r\n        <Route path='/sign-up' render={() => (\r\n           <SignUp setUser={this.setUser} />\r\n         )} />\r\n\r\n         <Route path='/sign-in' render={() => (\r\n            <SignIn user={user} setUser={this.setUser} />\r\n          )} />\r\n\r\n        <Route path='/'>\r\n          <div className=\"App\">\r\n\r\n            <Search setApp={this.setState.bind(this)}/>\r\n\r\n            <GoogleMap\r\n              initialCenter={this.state.userLocation}\r\n              coordinates={this.state.coordinates}\r\n              placeData={this.state.placeData}\r\n            />\r\n\r\n          </div>\r\n        </Route>\r\n      </Fragment>\r\n      </div>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { HashRouter } from 'react-router-dom'\r\n\r\nconst appJsx = (\r\n  <HashRouter>\r\n    <App />\r\n  </HashRouter>\r\n)\r\n\r\nReactDOM.render(appJsx, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}