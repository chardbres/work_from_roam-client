{"version":3,"sources":["components/Search.js","components/TestComponent.js","components/TestButton.js","components/PlacesDetail.js","components/GoogleMap.js","components/ReviewForm.js","components/App.js","serviceWorker.js","index.js"],"names":["Search","props","setQuery","query","setState","handleAutocompleteSelect","a","geocodeByAddress","results","getLatLng","coordinates","setApp","placeData","state","value","this","onChange","onSelect","getInputProps","suggestions","getSuggestionItemProps","loading","className","style","height","width","fontSize","placeholder","map","suggestion","active","backgroundColor","cursor","description","React","Component","GoogleApiWrapper","apiKey","process","TestComponent","test","formatted_address","href","target","place_id","TestButton","url","executeTest","console","log","geocodeByPlaceId","placeId","then","to","PlacesDetail","placeImage","photos","getUrl","src","name","reference","GoogleMap","componentDidMount","navigator","geolocation","getCurrentPosition","pos","coords","lat","latitude","lng","longitude","userLocation","showMarker","onMarkerClick","marker","event","selectedMarker","showWindow","onInfoWindowClose","showPOI","poiLocation","latLng","service","google","maps","places","PlacesService","getDetails","fields","data","status","handleClick","showPoiWindow","center","initialCenter","zoom","clickableIcons","onClick","position","visible","onClose","ReviewForm","handleChange","closeWindow","show","rating","review","display","float","type","min","max","App","path","bind","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a513146b.chunk.js","sourcesContent":["import React from 'react'\r\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from 'react-places-autocomplete'\r\nimport {GoogleApiWrapper} from 'google-maps-react'\r\nimport './Search.css'\r\n\r\n\r\nclass Search extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            query: ''\r\n        }\r\n    }\r\n\r\n// set query to find Place data\r\nsetQuery = query => {\r\n    this.setState({ query })\r\n}\r\n\r\n// send query to find Place data\r\n// use Place data to get coordinates\r\n// update state with coordinates and Place data\r\nhandleAutocompleteSelect = async query => {\r\n    const results = await geocodeByAddress(query)\r\n    const coordinates = await getLatLng(results[0])\r\n    this.props.setApp({ coordinates })\r\n    this.props.setApp({ placeData: results[0] })\r\n}\r\n\r\nrender() {\r\n    return (\r\n        <PlacesAutocomplete\r\n        value={this.state.query}\r\n        onChange={this.setQuery}\r\n        onSelect={this.handleAutocompleteSelect}\r\n      >\r\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\r\n        <div className='search-bar'>\r\n          <input\r\n            style={{ height: '40px', width: '100%', fontSize: '16px' }}\r\n            {...getInputProps({\r\n              placeholder: 'Search Places ...',\r\n              className: 'location-search-input',\r\n            })}\r\n          />\r\n          <div className=\"autocomplete-dropdown-container\">\r\n            {loading && <div>Loading...</div>}\r\n            {suggestions.map(suggestion => {\r\n              const className = suggestion.active\r\n                ? 'suggestion-item--active'\r\n                : 'suggestion-item';\r\n              // inline style for demonstration purpose\r\n              const style = suggestion.active\r\n                ? { backgroundColor: '#fafafa', cursor: 'pointer' }\r\n                : { backgroundColor: '#ffffff', cursor: 'pointer' };\r\n              return (\r\n                <div\r\n                  {...getSuggestionItemProps(suggestion, {\r\n                    className,\r\n                    style,\r\n                  })}\r\n                >\r\n                  <span>{suggestion.description}</span>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        </div>\r\n      )}\r\n      </PlacesAutocomplete>\r\n    )\r\n}\r\n    \r\n}\r\n\r\n\r\nexport default GoogleApiWrapper({\r\n  apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\r\n})(Search)","import React from 'react'\r\n\r\nclass TestComponent extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n    // render information inside an infoWindow for POI\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>test component</h1>\r\n                <p>{this.props.placeData.formatted_address}</p>\r\n                <a href={'https://developers.google.com/maps/documentation/javascript/tutorial'} target={'_blank'}>\r\n                  <button>display link to create a review</button>\r\n                </a>\r\n                <p>{this.props.placeData.place_id}</p>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TestComponent\r\n","import React from 'react'\r\nimport { geocodeByPlaceId, getLatLng } from 'react-places-autocomplete'\r\nimport { BrowserRouter as Router, Link } from 'react-router-dom'\r\n\r\n\r\nclass TestButton extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        geocodeByPlaceId(this.props.placeId)\r\n            .then(console.log)\r\n    }\r\n\r\n    url = 'http://localhost:3000'\r\n\r\n    executeTest = () => {\r\n        console.log('test button')\r\n    }\r\n\r\n    // render information inside an infoWindow for POI\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                <Link to={`/new/${this.props.placeId}`}>\r\n                    <button>Add a Review</button>\r\n                </Link>\r\n            </Router>\r\n            \r\n            \r\n        )\r\n    }\r\n}\r\n\r\nexport default TestButton","import React from 'react'\r\nimport TestButton from './TestButton'\r\nimport PropTypes from 'prop-types'\r\n\r\nclass PlacesDetail extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            test: true\r\n        }\r\n    }\r\n    \r\n    render() {\r\n        let placeImage = ''\r\n        // if data does not have any photos, display 'no image found' image\r\n        if (this.props.placeData && !this.props.placeData.photos) {\r\n            placeImage = 'https://1m19tt3pztls474q6z46fnk9-wpengine.netdna-ssl.com/wp-content/themes/unbound/images/No-Image-Found-400x264.png'\r\n        }\r\n        // if data includes photos, get url of the first photo\r\n        if (this.props.placeData && this.props.placeData.photos) {\r\n            placeImage = this.props.placeData.photos[0].getUrl()\r\n        }\r\n        let jsx\r\n        if (this.props.placeData) {\r\n            jsx = (\r\n                <div>\r\n\r\n                    <img height={'200px'} src={placeImage} />\r\n                    <h1>{this.props.placeData.name}</h1>\r\n                    <p><strong>google place_id: </strong>{this.props.placeData.reference || 'unknown'}</p>\r\n                    \r\n                    <TestButton placeId={this.props.placeData.reference}/>\r\n                </div>\r\n            )\r\n        } else {\r\n            jsx = (\r\n                <div>\r\n                    <h3>Loading...</h3>\r\n                </div>\r\n            )\r\n        }\r\n        return jsx\r\n    }\r\n}\r\n\r\nPlacesDetail.propTypes = {\r\n    placeData: PropTypes.object\r\n}\r\n\r\nexport default PlacesDetail","import React from 'react'\r\nimport {Map, InfoWindow, Marker, GoogleApiWrapper} from 'google-maps-react'\r\nimport TestComponent from './TestComponent'\r\nimport PlacesDetail from './PlacesDetail'\r\nimport TestButton from './TestButton'\r\n\r\n\r\nclass GoogleMap extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            placeData: null,\r\n            poiLocation: null,\r\n            selectedMarker: null,\r\n            showPoiWindow: true,\r\n            showMarker: false,\r\n            showWindow: false,\r\n            userLocation: '',\r\n            \r\n        }\r\n    }\r\n\r\n    // Using geolocation from browser to location user location\r\n    componentDidMount = () => {\r\n      if(navigator && navigator.geolocation) {\r\n        navigator.geolocation.getCurrentPosition(pos => {\r\n        console.log('found user location')\r\n        const coords = pos.coords\r\n        const lat = coords.latitude\r\n        const lng = coords.longitude\r\n        this.setState({ userLocation: { lat, lng },\r\n                        showMarker: true })\r\n                      })\r\n      }\r\n    }\r\n\r\n      // onClick handler to set marker to state and show corresponding info window\r\n    onMarkerClick = (props, marker, event) => {\r\n        this.setState({ selectedMarker: marker, showWindow: true })\r\n    }\r\n\r\n    // onClose handler for InfoWindow\r\n    onInfoWindowClose = () => {\r\n        this.setState({ showWindow: false })\r\n    }\r\n\r\n    showPOI = (map, event) => {\r\n        // declare function to handle data returned from service.getDetails()\r\n        const handleData = (data, status) => {\r\n            console.log(data)\r\n            // save data from places details to state.placeData\r\n            this.setState({placeData: data})\r\n        }\r\n\r\n        // save the click location and reset place data\r\n\r\n        this.setState({\r\n            poiLocation: { lat: event.latLng.lat(), lng: event.latLng.lng() },\r\n            userLocation: { lat: event.latLng.lat(), lng: event.latLng.lng() },\r\n            placeData: null\r\n        })\r\n        // create new instance of class PlacesService to access google places api\r\n        const service = new this.props.google.maps.places.PlacesService(map)\r\n        console.log('service is:', service)\r\n\r\n        // call getDetails from google places api, passing placeId, fields to get data for, and above callback function to handle the response\r\n        service.getDetails(\r\n            {\r\n                placeId: event.placeId,\r\n                fields: ['name', 'website', 'formatted_phone_number', 'formatted_address', 'photo', 'reference', 'reviews']\r\n            },\r\n            handleData\r\n        )\r\n    }\r\n\r\n    handleClick = (props, map, event) => {\r\n        // if click event has a place id, get details on place and save data to state\r\n        if(event.placeId) {\r\n            // first save the location and place id to state. Clear data for place image and place data\r\n            this.showPOI(map, event)\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        return (\r\n            <Map google={this.props.google}\r\n             center={this.state.userLocation}\r\n             initialCenter={this.props.initialCenter}\r\n             zoom={14}\r\n             clickableIcons={true}\r\n\r\n             onClick={this.handleClick}\r\n            >\r\n\r\n                {/* info window for poi locations */}\r\n                <InfoWindow\r\n                    position={this.state.poiLocation}\r\n                    visible={true}\r\n                >\r\n                    <PlacesDetail placeData={this.state.placeData} />\r\n                </InfoWindow>\r\n\r\n                {/* Marker needs a position prop to render, initially undefined\r\n                    User search sets the coordinates and passed down as props.coordinates */}\r\n                <Marker onClick={this.onMarkerClick}\r\n                    position={this.state.userLocation}\r\n                    name={'Current location'}\r\n                />\r\n\r\n                {/* InfoWindow becomes visible when this.state.showWindow === true */}\r\n                <InfoWindow marker={this.state.selectedMarker}\r\n                        position={this.props.coordinates}\r\n                        visible={this.state.showWindow}\r\n                        onClose={this.onInfoWindowClose}\r\n                >\r\n                    {/* Display placeData information inside InfoWindow */}\r\n                    <TestComponent placeData={this.props.placeData} />\r\n\r\n                </InfoWindow>\r\n\r\n            </Map>\r\n        )\r\n    }\r\n}\r\n\r\nexport default GoogleApiWrapper({\r\n    apiKey: (process.env.REACT_APP_GOOGLE_API_KEY)\r\n  })(GoogleMap)\r\n","import React, { Component }from 'react';\r\nimport './ReviewForm.css'\r\nimport { BrowserRouter as Router, Link } from 'react-router-dom'\r\n\r\n  class ReviewForm extends React.Component {\r\n    constructor(props) {\r\n      super(props)\r\n      this.state = {\r\n        rating: 3,\r\n        review: '',\r\n        show: true\r\n      }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n      console.log(event.target.value)\r\n      console.log(event.target.name)\r\n      this.setState({ [event.target.name]: event.target.value })\r\n    }\r\n\r\n    closeWindow = () => {\r\n      this.setState({ show: false })\r\n    }\r\n\r\n    render () {\r\n      let show = 'block'\r\n        if (!this.state.show) {\r\n          show = 'none'\r\n        }\r\n      return (\r\n        <Router>\r\n          <div className='review-form' style={{display: show}}>\r\n\r\n          <Link to='/'>\r\n            <button style={{float: 'right'}} onClick={this.closeWindow}>Close</button>\r\n          </Link>\r\n\r\n          <h1> Review </h1>\r\n                   \r\n            <form>\r\n              \r\n              <label> Rating: </label>\r\n              <input name=\"rating\" type=\"range\" min=\"0\" max=\"5\" value={this.state.rating} onChange={this.handleChange}/>\r\n              <p>{this.state.rating}</p>\r\n\r\n              <label> Review: </label>\r\n              <textarea name=\"review\" value={this.state.review} onChange={this.handleChange}/>\r\n              <button> Submit </button>\r\n\r\n            </form>\r\n          </div>\r\n        </Router>\r\n      )\r\n    }\r\n  }\r\n\r\n\r\n\r\n\r\n  export default ReviewForm;\r\n","import React from 'react';\r\nimport '../App.css';\r\nimport Search from './Search'\r\nimport GoogleMap from './GoogleMap';\r\nimport ReviewForm from './ReviewForm';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\r\n\r\nclass App extends React.Component {\r\n  constructor() {\r\n    super()\r\n    this.state = {\r\n      coordinates: {\r\n        lat: null,\r\n        lng: null\r\n      },\r\n      placeData: '',\r\n      userLocation: { lat: 42.3601, lng: -71.0589}\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <Router>\r\n        \r\n        <Route path='/new/:placeId'>\r\n          <ReviewForm />\r\n        </Route>\r\n\r\n        <Route path='/'>\r\n          <div className=\"App\">\r\n            \r\n            <Search setApp={this.setState.bind(this)}/>\r\n\r\n            <GoogleMap\r\n              initialCenter={this.state.userLocation}\r\n              coordinates={this.state.coordinates}\r\n              placeData={this.state.placeData}\r\n            />\r\n\r\n          </div>\r\n        </Route>\r\n      </Router>\r\n      \r\n      \r\n    )\r\n  }\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}